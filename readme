# Smart Content Aggregator API

A comprehensive RESTful API service for content aggregation with intelligent AI-powered features, built using modern TypeScript, Node.js, Express.js, and MongoDB technologies.

## Project Overview

The Smart Content Aggregator API is a sophisticated backend service designed to handle content management, user interactions, and AI-powered content summarization. The system provides a robust foundation for building content-driven applications with advanced features like automatic summary generation, personalized recommendations, and comprehensive user interaction tracking.

## System Architecture

### High-Level System Design

```
┌─────────────────────────────────────────────────────────────────────────────────┐
│                            CLIENT LAYER                                        │
├─────────────────┬─────────────────┬─────────────────┬─────────────────────────┤
│  Web Frontend   │  Mobile App     │  API Clients    │  Third Party Services   │
└─────────────────┴─────────────────┴─────────────────┴─────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                           API GATEWAY LAYER                                    │
├─────────────────┬─────────────────┬─────────────────┬─────────────────────────┤
│  Authentication │  Rate Limiting  │  CORS Handling  │  Request Validation     │
└─────────────────┴─────────────────┴─────────────────┴─────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                         EXPRESS.JS SERVER                                      │
├─────────────────┬─────────────────┬─────────────────┬─────────────────────────┤
│  Route Handlers │  Controllers    │  Middleware     │  Error Handling         │
└─────────────────┴─────────────────┴─────────────────┴─────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                         SERVICE LAYER                                          │
├─────────────────┬─────────────────┬─────────────────┬─────────────────────────┤
│  Article        │  User           │  Interaction    │  Recommendation         │
│  Service        │  Service        │  Service        │  Service                │
└─────────────────┴─────────────────┴─────────────────┴─────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                      AI INTEGRATION LAYER                                      │
├─────────────────┬─────────────────┬─────────────────┬─────────────────────────┤
│  Ollama         │  Cohere API     │  HuggingFace    │  OpenAI API             │
│  (Local)        │                 │  API            │                         │
└─────────────────┴─────────────────┴─────────────────┴─────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────────┐
│                         DATA LAYER                                             │
├─────────────────┬─────────────────┬─────────────────┬─────────────────────────┤
│  MongoDB        │  Mongoose ODM   │  Data Models    │  Database Indexes       │
│  Database       │                 │                 │                         │
└─────────────────┴─────────────────┴─────────────────┴─────────────────────────┘
```

### AI-Powered Summary Generation Flow

```
┌─────────────────────────────────────────────────────────────────────────────────┐
│                        ARTICLE CREATION FLOW                                   │
└─────────────────────────────────────────────────────────────────────────────────┘

Client Request                    Express Server                    AI Services
     │                                │                                 │
     ├─ POST /api/articles ──────────▶│                                 │
     │  {                             │                                 │
     │    "title": "...",             │                                 │
     │    "content": "...",           │                                 │
     │    "author": "...",            │                                 │
     │    "tags": [...]               │                                 │
     │  }                             │                                 │
     │                                │                                 │
     │                                ├─ Validate Request ──────────────┤
     │                                │                                 │
     │                                ├─ Check Summary Provided? ──────┤
     │                                │         │                       │
     │                                │         ├─ NO ─────────────────┤
     │                                │         │                       │
     │                                │         ▼                       │
     │                                ├─ Call Summary Service ─────────▶│
     │                                │                                 │
     │                                │                                 ├─ Try Ollama (Local)
     │                                │                    ┌────────────┤  ├─ Success? ─┐
     │                                │                    │            │  │           │
     │                                │                    │ Failure    │  ▼           │
     │                                │                    ▼            ├─ Try Cohere API
     │                                │                                 │  ├─ Success? ─┐
     │                                │                    ┌────────────┤  │           │
     │                                │                    │ Failure    │  ▼           │
     │                                │                    ▼            ├─ Try HuggingFace
     │                                │                                 │  ├─ Success? ─┐
     │                                │                    ┌────────────┤  │           │
     │                                │                    │ Failure    │  ▼           │
     │                                │                    ▼            ├─ Try OpenAI
     │                                │                                 │  ├─ Success? ─┐
     │                                │                    ┌────────────┤  │           │
     │                                │                    │ Failure    │  ▼           │
     │                                │                    ▼            ├─ Extractive Fallback
     │                                │                                 │  │           │
     │                                │                                 │  ▼           │
     │                                │◄──── Generated Summary ─────────┤  │           │
     │                                │                                 │  │           │
     │                                ├─ Save Article to MongoDB ──────┤  │           │
     │                                │  {                             │  │           │
     │                                │    title,                      │  │           │
     │                                │    content,                    │  │           │
     │                                │    author,                     │  │           │
     │                                │    summary: "AI Generated",   │  │           │
     │                                │    tags,                       │  │           │
     │                                │    createdAt                   │  │           │
     │                                │  }                             │  │           │
     │                                │                                 │  │           │
     │◄─── Article with Summary ──────┤                                 │  │           │
     │  {                             │                                 │  │           │
     │    "id": "...",                │                                 │  │           │
     │    "title": "...",             │                                 │  │           │
     │    "summary": "AI Generated...", │                              │  │           │
     │    "summaryProvider": "ollama",│                                 │  │           │
     │    "createdAt": "..."          │                                 │  │           │
     │  }                             │                                 │  │           │
```

### User Interaction Tracking Flow

```
┌─────────────────────────────────────────────────────────────────────────────────┐
│                       USER INTERACTION FLOW                                    │
└─────────────────────────────────────────────────────────────────────────────────┘

User Action                    API Server                    Database Layer
     │                             │                              │
     ├─ User views article ───────▶│                              │
     │                             ├─ POST /api/interactions ───▶│
     │                             │  {                           │
     │                             │    "user_id": "...",         │
     │                             │    "article_id": "...",      │
     │                             │    "interaction_type": "view"│
     │                             │  }                           │
     │                             │                              │
     │                             │                              ├─ Store Interaction
     │                             │                              │
     ├─ User likes article ───────▶│                              │
     │                             ├─ POST /api/interactions ───▶│
     │                             │  {                           │
     │                             │    "user_id": "...",         │
     │                             │    "article_id": "...",      │
     │                             │    "interaction_type": "like"│
     │                             │  }                           │
     │                             │                              │
     │                             │                              ├─ Store Like
     │                             │                              │
     ├─ User shares article ──────▶│                              │
     │                             ├─ POST /api/interactions ───▶│
     │                             │  {                           │
     │                             │    "user_id": "...",         │
     │                             │    "article_id": "...",      │
     │                             │    "interaction_type": "share",│
     │                             │    "shareMetadata": {        │
     │                             │      "platform": "twitter",  │
     │                             │      "message": "Check this!"│
     │                             │    }                         │
     │                             │  }                           │
     │                             │                              │
     │                             │                              ├─ Store Share Data
     │                             │                              │
     ├─ User comments ────────────▶│                              │
     │                             ├─ POST /api/interactions ───▶│
     │                             │  {                           │
     │                             │    "user_id": "...",         │
     │                             │    "article_id": "...",      │
     │                             │    "interaction_type": "comment",│
     │                             │    "content": "Great article!"│
     │                             │  }                           │
     │                             │                              │
     │                             │                              ├─ Store Comment
     │                             │                              │
     │◄─── Analytics Data ─────────┤◄──── Aggregated Stats ──────┤
     │  {                          │                              │
     │    "totalViews": 1234,      │                              │
     │    "totalLikes": 456,       │                              │
     │    "totalShares": 78,       │                              │
     │    "totalComments": 90      │                              │
     │  }                          │                              │
```

### Recommendation System Flow

```
┌─────────────────────────────────────────────────────────────────────────────────┐
│                      RECOMMENDATION ENGINE FLOW                                │
└─────────────────────────────────────────────────────────────────────────────────┘

User Request                 Recommendation Service            Database Analysis
     │                              │                               │
     ├─ GET /recommendations/───────▶│                               │
     │    user/USER_ID               │                               │
     │                               │                               │
     │                               ├─ Fetch User Profile ────────▶│
     │                               │                               ├─ Get user interests
     │                               │                               │  and interaction history
     │                               │◄──── User Data ──────────────┤
     │                               │  {                            │
     │                               │    interests: ["ai", "tech"], │
     │                               │    recentViews: [...],        │
     │                               │    likedArticles: [...]       │
     │                               │  }                            │
     │                               │                               │
     │                               ├─ Analyze User Behavior ─────▶│
     │                               │                               ├─ Calculate preferences
     │                               │                               │  based on interactions
     │                               │                               │
     │                               ├─ Find Similar Articles ─────▶│
     │                               │                               ├─ Query articles by:
     │                               │                               │  - Matching tags
     │                               │                               │  - Similar content
     │                               │                               │  - Popular in category
     │                               │                               │
     │                               ├─ Score and Rank ─────────────┤
     │                               │                               │
     │                               ├─ Filter Already Seen ───────▶│
     │                               │                               ├─ Exclude viewed articles
     │                               │                               │
     │◄─── Recommendations ──────────┤                               │
     │  {                            │                               │
     │    "recommendations": [       │                               │
     │      {                        │                               │
     │        "article": {...},      │                               │
     │        "score": 0.85,         │                               │
     │        "reason": "matches interests"│                         │
     │      }                        │                               │
     │    ],                         │                               │
     │    "total": 10,               │                               │
     │    "insights": {              │                               │
     │      "topInterests": [...],   │                               │
     │      "engagementPattern": "..."│                              │
     │    }                          │                               │
     │  }                            │                               │
```

## Core Features Implemented

### Article Management System
- **Create Articles**: Full article creation with automatic AI summary generation
- **Retrieve Articles**: Paginated retrieval with advanced filtering and search capabilities
- **Update Articles**: Comprehensive article modification with summary regeneration options
- **Delete Articles**: Safe article removal with cascade handling for related interactions
- **Bulk Operations**: Mass operations for summary regeneration and content updates

### User Management System  
- **User Registration**: Create user profiles with interest tracking
- **Profile Management**: Update user interests and preferences for personalized experiences
- **User Analytics**: Track user engagement patterns and behavior analytics

### Interaction Tracking System
- **Multi-Type Interactions**: Support for views, likes, shares, and comments
- **Real-Time Analytics**: Live interaction statistics and engagement metrics
- **Social Features**: Comment threads, share tracking with platform-specific metadata
- **Engagement Insights**: Detailed analytics on user behavior and content performance

### AI-Powered Summary Generation
- **Multi-Provider Architecture**: Integrated support for multiple AI services
- **Intelligent Failover**: Automatic switching between providers based on availability
- **Cost Optimization**: Smart provider selection prioritizing free and local options
- **Quality Assurance**: Extractive fallback ensures summary generation always succeeds

## Technical Implementation Details

### AI Summary Generation Strategy

The system implements a sophisticated multi-tiered approach to summary generation:

**Tier 1: Local AI (Ollama)**
- Completely free and privacy-focused
- Uses open-source models like Llama2
- No API costs or rate limitations
- Requires local Ollama installation

**Tier 2: Cloud APIs with Free Tiers**
- Cohere API with generous free tier
- HuggingFace Inference API with free models
- Automatic rate limit handling and retry logic

**Tier 3: Premium Services**
- OpenAI GPT models for highest quality
- Used only when other providers fail
- Configurable based on budget requirements

**Tier 4: Extractive Fallback**
- TF-IDF based algorithmic summarization
- Always available regardless of external services
- Ensures 100% system reliability

### Database Schema Design

**Articles Collection**
```typescript
{
  _id: ObjectId,
  title: String (required, indexed),
  content: String (required),
  author: String (required),
  summary: String (auto-generated),
  summaryProvider: String (tracking AI provider used),
  tags: Array<String> (indexed for filtering),
  metadata: {
    wordCount: Number,
    readingTime: Number,
    language: String
  },
  createdAt: Date (indexed),
  updatedAt: Date
}
```

**Users Collection**
```typescript
{
  _id: ObjectId,
  username: String (required, unique),
  interests: Array<String> (for recommendations),
  profile: {
    displayName: String,
    bio: String,
    preferences: Object
  },
  statistics: {
    totalArticlesRead: Number,
    totalInteractions: Number,
    favoriteTopics: Array<String>
  },
  createdAt: Date,
  updatedAt: Date
}
```

**Interactions Collection**
```typescript
{
  _id: ObjectId,
  userId: ObjectId (required, indexed),
  articleId: ObjectId (required, indexed),
  interactionType: String (required, enum: ['view', 'like', 'share', 'comment']),
  content: String (for comments),
  shareMetadata: {
    platform: String,
    message: String,
    url: String
  },
  metadata: {
    userAgent: String,
    ipAddress: String (anonymized),
    sessionId: String
  },
  createdAt: Date (indexed)
}
```

## API Endpoint Documentation

### Article Endpoints

**POST /api/articles**
- Creates new article with automatic AI summary generation
- Supports manual summary override
- Returns article with generated summary and provider information

**GET /api/articles**
- Retrieves paginated articles with filtering capabilities
- Supports search by title, content, tags, and author
- Includes sorting options by date, popularity, and relevance

**GET /api/articles/:id**
- Retrieves specific article by ID
- Includes interaction statistics and related articles

**PUT /api/articles/:id**
- Updates article content and metadata
- Optionally regenerates summary with new content

**DELETE /api/articles/:id**
- Soft deletes article (maintains referential integrity)
- Handles cascade deletion of related interactions

**POST /api/articles/:id/summary/regenerate**
- Forces summary regeneration for existing article
- Useful for improving summaries with better AI models

**GET /api/articles/stats**
- Returns comprehensive article statistics
- Includes engagement metrics and content analytics

**POST /api/articles/bulk/regenerate-summaries**
- Bulk operation for summary regeneration
- Useful for system maintenance and improvements

### User Endpoints

**POST /api/users**
- Creates new user profile
- Initializes default preferences and interests

**GET /api/users/:id**
- Retrieves user profile with statistics
- Includes interaction history and preferences

**PUT /api/users/:id**
- Updates user interests and preferences
- Triggers recommendation recalculation

### Interaction Endpoints

**POST /api/interactions**
- Records new user interaction
- Supports all interaction types with appropriate metadata

**GET /api/interactions/article/:articleId/stats**
- Returns detailed interaction analytics for article
- Includes engagement rates and user demographics

**GET /api/interactions/user/:userId**
- Returns user interaction history
- Useful for building user profiles and recommendations

### Recommendation Endpoints

**GET /api/recommendations/user/:userId**
- Returns personalized article recommendations
- Based on user interests and interaction history

**GET /api/recommendations/trending**
- Returns currently trending articles
- Based on recent interaction velocity

**GET /api/recommendations/popular**
- Returns all-time popular articles
- Based on cumulative interaction scores

## Installation and Setup Guide

### Prerequisites
- Node.js 18.x or higher
- MongoDB 5.0 or higher
- npm or yarn package manager

### Environment Configuration

Create a `.env` file with the following configuration:

```env
# Server Configuration
PORT=3000
NODE_ENV=development

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/content-aggregator

# AI Provider API Keys (optional)
OPENAI_API_KEY=your_openai_api_key_here
HUGGINGFACE_API_KEY=your_huggingface_api_key_here
COHERE_API_KEY=your_cohere_api_key_here

# Ollama Configuration (for local AI)
OLLAMA_URL=http://localhost:11434
OLLAMA_MODEL=llama2

# Security Configuration
JWT_SECRET=your_jwt_secret_here
BCRYPT_ROUNDS=12

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=100
```

### Local Development Setup

**Step 1: Install Dependencies**
```bash
npm install
```

**Step 2: Set Up Database**
```bash
# Start MongoDB
mongod --dbpath /path/to/your/db

# Or use MongoDB Atlas cloud service
```

**Step 3: Set Up Ollama (Optional but Recommended)**
```bash
# Install Ollama
curl -fsSL https://ollama.ai/install.sh | sh

# Pull a model
ollama pull llama2

# Start Ollama service
ollama serve
```

**Step 4: Start Development Server**
```bash
npm run dev
```

### Production Deployment

**Step 1: Build Application**
```bash
npm run build
```

**Step 2: Start Production Server**
```bash
npm start
```

## Testing and Quality Assurance

### API Testing
The system includes comprehensive API documentation via Swagger UI:
- Navigate to `http://localhost:3000/api-docs` after starting the server
- Interactive testing interface for all endpoints
- Request/response examples and schema validation

### Sample API Requests

**Create Article with AI Summary:**
```bash
curl -X POST http://localhost:3000/api/articles \
  -H "Content-Type: application/json" \
  -d '{
    "title": "The Future of Artificial Intelligence",
    "content": "Artificial intelligence is rapidly evolving and transforming industries across the globe. Machine learning algorithms are becoming more sophisticated, enabling computers to perform tasks that were once thought impossible. From natural language processing to computer vision, AI technologies are revolutionizing how we interact with digital systems. The implications for business, healthcare, education, and daily life are profound and far-reaching.",
    "author": "Dr. Sarah Johnson",
    "tags": ["artificial-intelligence", "machine-learning", "technology", "future"]
  }'
```

**Track User Interaction:**
```bash
curl -X POST http://localhost:3000/api/interactions \
  -H "Content-Type: application/json" \
  -d '{
    "user_id": "USER_OBJECT_ID",
    "article_id": "ARTICLE_OBJECT_ID",
    "interaction_type": "like"
  }'
```

**Get Personalized Recommendations:**
```bash
curl -X GET http://localhost:3000/api/recommendations/user/USER_OBJECT_ID
```

## System Performance and Scalability

### Performance Optimizations Implemented

**Database Indexing Strategy:**
- Compound indexes on frequently queried fields
- Text indexes for full-text search capabilities
- TTL indexes for automatic cleanup of old data

**Caching Strategy:**
- In-memory caching of frequently accessed articles
- AI provider response caching to reduce API calls
- User preference caching for faster recommendations

**API Optimization:**
- Pagination for all list endpoints
- Field selection to minimize data transfer
- Aggregation pipelines for complex analytics queries

### Scalability Considerations

**Horizontal Scaling:**
- Stateless API design for easy load balancing
- Database sharding preparation for large datasets
- Microservice architecture ready for containerization

**Monitoring and Observability:**
- Comprehensive logging with structured format
- Performance metrics collection and monitoring
- Error tracking and alerting systems

## Future Enhancement Roadmap

### Immediate Improvements (Next Sprint)
- **Authentication System**: JWT-based authentication and authorization
- **Rate Limiting**: Advanced rate limiting with user tiers
- **Input Sanitization**: Enhanced security against injection attacks
- **Comprehensive Testing**: Unit tests, integration tests, and end-to-end testing

### Medium-Term Features (Next Quarter)
- **Real-Time Features**: WebSocket integration for live notifications
- **Advanced Analytics**: Machine learning-based user behavior analysis
- **Content Moderation**: AI-powered content filtering and moderation
- **Multi-Language Support**: Internationalization and localization

### Long-Term Vision (Next Year)
- **Machine Learning Pipeline**: Custom recommendation models
- **Advanced AI Features**: Sentiment analysis, topic modeling, and content classification
- **Enterprise Features**: Multi-tenant architecture, advanced admin controls
- **Mobile SDK**: Native mobile application support

## Technical Architecture Decisions

### Why TypeScript?
- **Type Safety**: Compile-time error detection reduces runtime bugs
- **Developer Experience**: Enhanced IDE support with autocomplete and refactoring
- **Code Maintainability**: Self-documenting code with clear interfaces
- **Team Collaboration**: Consistent code standards and expectations

### Why Express.js?
- **Lightweight and Fast**: Minimal overhead for API development
- **Extensive Ecosystem**: Rich middleware library and community support
- **Flexibility**: Unopinionated structure allows custom architecture
- **Industry Standard**: Widely adopted with extensive documentation

### Why MongoDB?
- **Schema Flexibility**: Easy evolution of data models as requirements change
- **JSON-Native**: Natural fit for JavaScript/TypeScript applications
- **Powerful Aggregation**: Complex analytics and data processing capabilities
- **Horizontal Scaling**: Built-in support for sharding and replication

### Why Multi-Provider AI Architecture?
- **Reliability**: No single point of failure for critical summarization feature
- **Cost Optimization**: Intelligent provider selection minimizes operational costs
- **Future-Proof**: Easy integration of new AI providers as technology evolves
- **Quality Assurance**: Fallback mechanisms ensure consistent service availability

## Security Considerations

### Data Protection
- Input validation and sanitization on all endpoints
- SQL injection prevention through parameterized queries
- XSS protection with proper output encoding
- CORS configuration for cross-origin request security

### Authentication and Authorization
- JWT-based authentication system ready for implementation
- Role-based access control architecture prepared
- API key management for external AI services
- Rate limiting to prevent abuse and DDoS attacks

### Privacy and Compliance
- User data anonymization in analytics
- GDPR compliance preparation with data export capabilities
- Audit logging for security event tracking
- Secure API key storage and rotation procedures

This Smart Content Aggregator API represents a comprehensive solution for modern content management needs, combining robust backend architecture with cutting-edge AI capabilities to deliver an exceptional user experience.
